
알론조 처치는 수학 기초론을 연구하던 중에 분명하고 간결한 방법으로 함수를 묘사하기 위해 람다
계산법을 고안해 냈습니다.

식 형식의 람다식, 문 형식의 람다식

람다식은 익명 메소드를 만들기 위해 사용
매개_변수_목록 => 식

>=은 "입력" 연산자입니다.

익명 메소드를 만들려면 델리게이트 필요
형식 유추(Type Inference)

_문 형식의 람다식 (조건문)

//식형식은 중괄호가 없고, 문 형식은 중괄호가 있다

Func 델리게이트는 결과를 반환하는 메소드를 참조하기 위해 만들어졌습니다.
Action 델리게이트는 결과를 반환하지 않는 메소드를 참조
//무명함수 만들때 delegate선언대신 func,action을 사용하여 코드를 간결하게 만듬


_식트리(Expression Tree) 426p
using System.Linq.Expressions

_Expression 클래스와 파생 클래스들

Expression의 파생 클래스		설명
BinaryExpression			이항연산자(+,-,*,==,!=등)를 갖는 식을 표현합니다.
BlockExpression			변수를 정의할 수 있는 식을 블록을 표현합니다.
ConditionalExpression		조건 연산자가 있는 식을 나타냅니다.
ConstantExpression			상수가 있는 식을 나타냅니다.


Expression 클래스 자신은 abstract로 선언되어 자신의 인스턴스는 만들 수 없지만,
파생 클래스의 인스턴스를 생성하는 정적 팩토리 메소드를 제공하고 있습니다.


_팩토리 메소드
팩토리 메소드(Factory Method)는 클래스의 인스턴스를 생성하는 일을 담당하는 메소드를 가리키는 용어

Expression 클래스의 정적 팩토리 메소드들은 Expression 클래스의 파생 클래스인 
ConstantExpression, BinaryExpression 클래스 등의 인스턴스를 생성하는 기능을 제공함으로써 
우리들의 수고를 줄여줍니다.

식 트리는 코드를 "데이터"로서 보관할 수 있습니다.
데이터베이스 처리를 위한 식 트리는 LINQ에서 사용됩니다.