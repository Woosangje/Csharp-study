20 1 234 56
인터페이스는 메소드, 이벤트, 인덱서, 프로퍼티만을 가질 수 있습니다

인터페이스는 접근 제한 한정자를 사용할 수 없고 모든 것이 public으로 선언됩니다
인터페이스는 인스턴스도 만들 수가 없습니다

인터페이스는 인스턴스를 가질 수 없지만, 인터페이스를 상속받는 클래스의 인스턴스를 만드는 것은 가능


파생 클래스는 인터페이스에 선언되어 있는 모든 메소드 및 프로퍼티를 구현해줘야 하며,
이 메소드들은 public 한정자로 수식해야 합니다.

인터페이스는 인스턴스를 못 만들지만, 참조는 만들 수 있습니다.


추상 클래스: 인터페이스와 클래스 사이
추상 클래스는 구현을 갖되 인스턴스는 만들지 못합니다.
abstract 한정자
클래스와 다르게 추상 메소스(Abstract Method)를 가질 수 있습니다.
컴파일러는 추상 메소드가 private을 제외한 한정자로 수식될 것을 강요

추상 클래스는 또 다른 추상 클래스를 상속할 수 있으며,
이 경우 자식 추상 클래스는 부모 추상 클래스의 추상 메소드를 구현하지 않아도 됩니다
추상 메소드는 인스턴스를 생성할 클래스에서 구현하면 되니까요.

DateTime.Now.ToLocalTime()
String message = String.Format(format, args);

인터페이스와 추상클레스가 다른점
https://holjjack.tistory.com/41


절대경로 @붙여줌
new FileLogger(@"C:\Users\dnedr\Desktop\githurb\Csharp-study\09property\09property\MyLog.txt"));
//인터페이스, 기능이 비슷한 클래스들의 메소드이름을 약속시켜줌 
메소드이름만 받아서 행동과 종류를 표현 예) 소,중,대 "공격"클래스  또는 불,물,땅 "속성"클래스
//추상클래스는 인터페이스와 달리 구현(생성자를 제외한 멤버들) 선언할 수 있음
(멤버선언 가능하니 추상클래스에서 적당한 규모의 연산하기 좋을듯)
//아마도 인터페이스를 추상클래스로 상속 해서 써먹을거 같음 엔진사용시 이해가 쉬울듯