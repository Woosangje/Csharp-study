배열의 선언

10.1 배열 선언하는 법
데이터형식[ ] 배열이름 = new 데이터형식[ 용량 ];

5개 선언
int[] array = new int[5];

10.2 배열을 초기화하는 세 가지 방법
첫번째 방법: 배열의 원소 개수 명시하고, 그 뒤에 중괄호 사이에 데이터를 입력한다.
string[] array1 = new string[3]{"안녕", "Hello", "Halo"};

두번째 방법: 첫번째와 비슷하지만, 배열의 용량을 생략
string[] array2 = new string[] {"안녕","Hello","Halo"};
		[]안에 용량 명시 생략 

세번째 방법:타인이 쉽게 알도록 첫번째 방법을 사용 할것
string[] array3 ={ "안녕","Hello","Halo"};

10.3 알아두면 삶이 윤택해지는 System.Array
C#에서는 모든 것이 객체입니다. 배열도 객체이며, 당연히 기반이 되는 형식이 있습니다. 
.NET프레임워크의 CTS(Common Type System)에서 배열은 System.Array 클래스에 대응됩니다.

따라서 System.Array의 특성과 메소드를 파악하면 배열의 특성과 메소드를 알게 되는 셈이며,
보너스로 배열을 이용하여 재미있는 일들도 할 수 있게 됩니다. 
예를 들어 배열의 내부 데이터를 원하는 순서대로 정렬한다던가, 특정 데이터를 배열 속에서 찾아내는 작업들 말입니다.
System.Array클래스에는 수십 가지 메소드와 프로퍼티가 있지만, 지면을 절약하기 위해 우리는 그 중에서 자주 사용하게
될 몇 가지만 살펴보겠습니다.

다음 표는 Array 클래스의 주요 메소드와 프로퍼니를 나타냅니다.
정적메소드
Sort()  배열을 정렬합니다.
BinarySearch<T>() 	이진 탐색을 수행합니다. 꺾쇠 괄호 <, >와 그 사이에 있는 T에 대해선 잠시 후에 설명하겠습니다.
IndexOf()  배열에서 찾고자하는 특정 데이터의 인덱스를 반환합니다.
TrueForAll<T>()  배열의 모든 요소가 지정한 조건에 부합하는지의 여부를 반환합니다.
FindIndex<T>() 	배열에서 지정한 조건에 부함하는 첫 번째 요소의 인덱스를 반환합니다.
		IndexOf( ) 메소드가 특정 값을 찾는데 비해, FindIndex<T>( ) 메소드는
		지정한 조건에 바탕하여 값을 찾습니다.
Resize<T>( )	배열의 크기를 재조정합니다.
Clear( )		배열의 모든 요소를 초기화합니다. 배열이 숫자 형식 기반이면 0으로, 논리 형식 기반이면 false로,
		참조 형식 기반이면 null로 초기화합니다.
ForEach<T>( )	배열의 모든 요소에 대해 동일한 작업을 수행하게 합니다.

인스턴스 메소드
GetLength( )	배열에서 지정한 차원의 길이를 반환합니다. 이 메소드는 나중에 설명 하게 될
		다차원 배열에서 유용하게 사용됩니다.

프로퍼티	
Length 		배열의 길이를 반환합니다.
Rank		배열의 차원을 반환합니다.

<T>는 형식 매개 변수(Type Parameter)라고 하는데,
이들 메소드를 호출할 때는 T 대신 배열의 기반 자료형을 매개 변수로 입력하면 
컴파일러가 해당 형식에 맞춰 동작하도록 위 메소드들을 컴파일합니다.

10.6가변 배열 jagged Array
데이터 형식[ ][ ] 배열이름  = new 데이터형식[가변배열의 용량][ ];
가변배열은 2차원배열이 아님
2차원 배열은 [ ]  괄호를 하나만 쓰고 그 안에 첨자를 두 개 사용한 반면, 가변 배열은 [ ] 괄호가 두 개입니다.

10.7 컬렉션 맛보기
컬렉션(Collection)이란, 같은 성격을 띄는 데이터의 모듬을 담는 자료 구조를 말합니다.
사실, 배열도 .NET 프레임워크가 제공하는 다양한 컬렉션 자료 구조의 일부입니다.
ArrayList, Queue, Stack, Hashtable

10.7.1 ArrayList
ArrayList는 가장 배열과 닮은 컬렉션이라 할 수 있습니다.
컬렉션의 요소에 접근할 때는[ ] 연산자를 이용하고,
특정 위치에 있는 요소에 데이터를 임의로 할당할 수도 있습니다. 
한편, 배열과는 달리 컬렉션을 생성할 때 용량을 미리 지정할 필요가 없이 필요에 따라 자동으로 용량이 늘어나거나
줄어듭니다. ArrayList의 가장 큰 장점이죠.
ArrayList에서 가장 중요한 메소드는 Add(), RemoveAt(), Insert(), 이렇게 세 개입니다.
Add( ) 메소드는 컬렉션의 가장 마지감에 있는 요소 뒤에 새 요소를 추가하고, 
RemoveAt() 메소드는 특정 인덱스에 있는 요소를 제거합니다.
Insert() 메소드는 원하는 위치에 새 요소를 삽입합니다.

ArrayList list = new ArrayList();
list.Add( 10 );
list.Add( 20 );
list.Add( 30 );

list.RemoveAt( 1 ); //20을 삭제

list.Insert( 1, 25); //25를 1번 인덱스에 삽입. 즉, 10과 30 사이에 25를 삽입
Add.()와Insert()는 object형식으로 박싱됨

10.7.2 Queue
Queue는 대기열이라는 뜻입니다.
Queue 자료구조는 데이터나 작업을 차례대로 입력해뒀다가 입력된 순서대로 하나씩 꺼내 처리하기 위해 사용됩니다.
배열이나 리스트가 원하는 위치에 자유롭게 접근하는 반면에,
Queue는 입력은 오직 뒤에서, 출력은 앞에서만 이루어집니다.

데이터를 입력하는 작업은 Enqueue() 메소드를 이용해서 합니다.
Queue que = new Queue();
que.Enqueue( 1 );
que.Enqueue( 2 );
반대로 Queue에서 데이터를 꺼낼 때는 Dequeue() 메소드를 이용합니다. 여기에서 주의할 점은 
Dequeue()를 실행하면 데이터를 자료 구조에서 실제로 꺼내게 된다는 것입니다.
그래서 Dequeue()를 실행하면 제일 앞으로 옮겨진 데이터가 나오고, 
그 뒤에 있던 데이터가 다시 맨 앞으로 이동하게 됩니다.

10.7.3 Stack
stack은 Queue와는 반대로 먼저 들어온 데이터가 나중에 나가고 (First In-Last Out),
나중에 들어온 데이터는 먼저 나가는(Last In-First Out)구조의 컬렉션입니다.
Stack에 데이터를 넣을 때는 Push () 메소드를 이용하고,
데이터를 꺼낼 때는 Pop() 메소드를 이용하면 됩니다.

10.7.4 Hashtable
Hashtable은 키(Key)와 값(Value)의 쌍으로 이루어진 데이터를 다룰 때 사용합니다.
가령 "book"을 키로, "책"을 값으로 입력하는 식이죠.
Hashtable은 여러 모로 멋진 자료구조 입니다. 탐색 속도가 빠르고, 사용하기도 편합니다.

Hashtable ht = new Hashtable();
ht["book"] = "책";
ht["cook"] = "요리사";
ht["tweet"] = "지저귀다";

Console.WriteLine( ht["book"] );
Console.WriteLine( ht["cook"] );
Console.WriteLine("ht["tweet"] );

10/8 Indexer
인덱서(Indexer)는 인덱스(Index)를 이용해서 객체 내의 데이터에 접근 하게 해주는 프로퍼티라고 생각하면 이해하기 쉽습니다.
객체를 마치 배열처럼 사용할 수 있게 해주지요.

class 클래스이름
{
	한정자 인덱서형식 this[형식 index]
//인덱스의 식별자가 꼭 index일 필요는 없습니다.
//취향에 따라 적당한 이름을 사용하세요.
get
{
	//index를 이용하여 내부 데이터 변환
}

set
{
//index를 이용하여 내부 데이터 저장
}
}
}

인덱서를 통해 데이터를 저장하고자 하는 시도가 이루어질 때 지정한 인덱스보다 배열의 크기가 작다면 인덱스에 맟춰
배열의 크기를 재조정합니다.

프로퍼니는 객체 내의 데이터에 접근할 수 있도록 하는 통로입니다.
인덱서도 프로퍼티처럼 객체 내의 데이터에 접근할 수 있도록 하는 통로입니다.
프로퍼티와 다른 점이라면 "인덱스(index)"를 이용한다는 사실이죠.


