배열의 선언

10.1 배열 선언하는 법
데이터형식[ ] 배열이름 = new 데이터형식[ 용량 ];

5개 선언
int[] array = new int[5];

10.2 배열을 초기화하는 세 가지 방법
첫번째 방법: 배열의 원소 개수 명시하고, 그 뒤에 중괄호 사이에 데이터를 입력한다.
string[] array1 = new string[3]{"안녕", "Hello", "Halo"};

두번째 방법: 첫번째와 비슷하지만, 배열의 용량을 생략
string[] array2 = new string[] {"안녕","Hello","Halo"};
		[]안에 용량 명시 생략 

세번째 방법:타인이 쉽게 알도록 첫번째 방법을 사용 할것
string[] array3 ={ "안녕","Hello","Halo"};

10.3 알아두면 삶이 윤택해지는 System.Array
C#에서는 모든 것이 객체입니다. 배열도 객체이며, 당연히 기반이 되는 형식이 있습니다. 
.NET프레임워크의 CTS(Common Type System)에서 배열은 System.Array 클래스에 대응됩니다.

따라서 System.Array의 특성과 메소드를 파악하면 배열의 특성과 메소드를 알게 되는 셈이며,
보너스로 배열을 이용하여 재미있는 일들도 할 수 있게 됩니다. 
예를 들어 배열의 내부 데이터를 원하는 순서대로 정렬한다던가, 특정 데이터를 배열 속에서 찾아내는 작업들 말입니다.
System.Array클래스에는 수십 가지 메소드와 프로퍼티가 있지만, 지면을 절약하기 위해 우리는 그 중에서 자주 사용하게
될 몇 가지만 살펴보겠습니다.

다음 표는 Array 클래스의 주요 메소드와 프로퍼니를 나타냅니다.
정적메소드
Sort()  배열을 정렬합니다.
BinarySearch<T>() 	이진 탐색을 수행합니다. 꺾쇠 괄호 <, >와 그 사이에 있는 T에 대해선 잠시 후에 설명하겠습니다.
IndexOf()  배열에서 찾고자하는 특정 데이터의 인덱스를 반환합니다.
TrueForAll<T>()  배열의 모든 요소가 지정한 조건에 부합하는지의 여부를 반환합니다.
FindIndex<T>() 	배열에서 지정한 조건에 부함하는 첫 번째 요소의 인덱스를 반환합니다.
		IndexOf( ) 메소드가 특정 값을 찾는데 비해, FindIndex<T>( ) 메소드는
		지정한 조건에 바탕하여 값을 찾습니다.
Resize<T>( )	배열의 크기를 재조정합니다.
Clear( )		배열의 모든 요소를 초기화합니다. 배열이 숫자 형식 기반이면 0으로, 논리 형식 기반이면 false로,
		참조 형식 기반이면 null로 초기화합니다.
ForEach<T>( )	배열의 모든 요소에 대해 동일한 작업을 수행하게 합니다.

인스턴스 메소드
GetLength( )	배열에서 지정한 차원의 길이를 반환합니다. 이 메소드는 나중에 설명 하게 될
		다차원 배열에서 유용하게 사용됩니다.

프로퍼티	
Length 		배열의 길이를 반환합니다.
Rank		배열의 차원을 반환합니다.

<T>는 형식 매개 변수(Type Parameter)라고 하는데,
이들 메소드를 호출할 때는 T 대신 배열의 기반 자료형을 매개 변수로 입력하면 
컴파일러가 해당 형식에 맞춰 동작하도록 위 메소드들을 컴파일합니다.