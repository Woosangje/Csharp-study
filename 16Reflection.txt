
리플렉션은 객체의 형식(Type) 정보를 들여다보는 기능입니다.
이 기능을 이용하면 프로그램 실행 중에 객체의 형식 이름부터, 프로퍼티 목록, 메소드 목록,
필드, 이벤트 목록까지 모두 열어볼 수 있습니다.
심지어는 새로운 데이터 형식을 동적으로 만들 수도 있습니다.
.NET 팀이 Object 형식에 GetType() 메소드를 만들어놓음

Object는 모든 데이터 형식의 조상이고 모든 데이터 형식은 
Object 형식이 갖고 있는 메소드를 갖고있다.

GetType() 메소드는 객체의 형식 정보를 반환하는 기능을 합니다.

GetConstructors()		ConstructorInfo[]		해당 형식의 모든 생성자 목록을 반환합니다.
GetEvents()		EventInfo[]		해당 형식의 이벤트 목록을 반환합니다.
GetFields()		FieldInfo[]		해당 형식의 필드 목록을 반환합니다.
GetGenericArguments()	Type[]			해당 형식의 형식 매개 변수 목록을 반환합니다.
GetInterfaces()		Type[]			해당 형식이 상속하는 인터페이스 목록을 반환합니다.
GetMembers()		MemberInfo[]		해당 형식의 멤버 목록을 반환합니다.
GetMethods()		MethodInfo[]		해당 형식의 메소드 목록을 반환합니다.
GetNestedTypes()		Type[]			해당 형식의 내장 형식 목록을 반환합니다.
GetProperties()		PropertyInfo[]		해당 형식의 프로퍼티 목록을 반환합니다.


_리플렉션을 이용해서 객체 생성하고 이용하기
리플렉션을 이용해서 동적으로 인스턴스를 만들기 위해서는 System.Activator 클래스의 도움이 필요합니다.
인스턴스를 만들고자 하는 형식의 Type 객체를 매개 변수로 넘기면, 
Activator.CreateInstance() 메소드는 입력받은 형식의 인스턴스를 생성하여 반환합니다.

object a = Activator.CreateInstance(typeof(int));

일반화를 지원하는 버넞의 CreateInstance() 메소드도 있습니다.

List<int> list = Activator.CreateInstance<List<int>>();

_형식 내보내기
리플렉션을 이용하면 런타임에 원하는 형식의 정보를 읽어낼 수 있을 뿐 아니라,
그 형식의 인스턴스도 만들 수 있으면 심지어는 프로퍼티나 필드에 값을 할당하고 메소드를 호출할 수도 있습니다.

동적으로 새로운 형식을 만드는 작업은 System.Reflection.Emit 네임스페이스에 있는 클래스들을 통해 이루어집니다.
리플렉션에서의 Emit은 프로그램이 실행 중에 만들어 낸 새 형식을 CLR의 메모리에 "내보낸다"는 
의미로 생각하면 이해하는 데 도움이 될 겁니다.

_애트리뷰트(Attribute)
애트리뷰트는 코드에 대한 부가 정보를 기록하고 읽은 수 있는 기능입니다.
애트리뷰트가 주석과 다른 점은 주석이 사람이 읽고 쓰는 정보라면, 
애트리뷰트는 사람이 작성하고 컴퓨터가 읽는다는 것입니다.

애트리뷰트를 이용해서 클래스나 구조체, 메소드, 프로퍼티 등에 데이터를 기록해두면
이 정보를 c#컴파일러나 c#으로 작정된 프로그램이 이 정보를 읽어 사용할 수 있습니다.

_메타데이터
메타데이터(Metadata)란 데이터의 데이터를 말합니다. 가령 C#코드도 데이터지만, 이 코드에 대한 정보,
데이터가 있을 수 있습니다. 이를 메타데이터라고 하는 것이죠.

